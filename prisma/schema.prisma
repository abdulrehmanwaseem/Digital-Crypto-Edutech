generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?
  role          Role      @default(USER)
  occupation    String    @default("Not specified")
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  referralCode  String?   @unique
  referredBy    String?

  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  profile       Profile?
  referralStats ReferralStats?
  payments      Payment[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?  @default("Not specified")
  location     String?  @default("Not specified")
  avatar       String?  @default("")
  twitter      String?  @default("")
  telegram     String?  @default("")
  website      String?  @default("")
  achievements Json?    @default("[]")
  activities   Json?    @default("[]")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  price       Float
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments Enrollment[]
  payments    Payment[]

  @@index([title])
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Payment {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  proofImageUrl String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model ReferralStats {
  id             String   @id @default(cuid())
  userId         String   @unique
  totalReferrals Int      @default(0)
  activeReferrals Int     @default(0)
  earnings       Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}
