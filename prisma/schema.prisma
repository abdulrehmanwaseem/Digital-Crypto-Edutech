generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  role             Role      @default(USER)
  occupation       String?
  incomeRange      String?
  occupationType   String?
  phone            String?
  withdrawalAddress String?
  referralCode     String?   @unique
  referredBy       String?
  referralCount    Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  profile          Profile?
  courses          Course[]
  payments         Payment[]
}

model Profile {
  id         String   @id @default(cuid())
  userId     String   @unique
  bio        String?  @db.Text
  location   String?
  avatar     String?
  twitter    String?
  telegram   String?
  website    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  imageUrl      String?
  price         Float
  duration      String?
  features      String[] @default([])
  stipend       Json?
  referralBonus Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User[]
  payments      Payment[]
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  status    String
  courseId  String
  userId    String
  proofUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SiteSettings {
  id              String    @id @default("1")
  siteName        String    @default("CryptoEdu")
  siteTitle       String    @default("Learn Crypto Trading")
  description     String    @default("Your platform for crypto education")
  contactEmail    String    @default("contact@cryptoedu.com")
  maintenanceMode Boolean   @default(false)
  updatedAt       DateTime  @updatedAt
}